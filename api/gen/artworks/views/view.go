// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks views
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// WalletnodeImage is the viewed result type that is projected based on a view.
type WalletnodeImage struct {
	// Type to project
	Projected *WalletnodeImageView
	// View to render
	View string
}

// WalletnodeImageView is a type that runs validations on a projected type.
type WalletnodeImageView struct {
	// Uploaded image ID
	ImageID *string
	// Image expiration
	ExpiresIn *string
}

var (
	// WalletnodeImageMap is a map of attribute names in result type
	// WalletnodeImage indexed by view name.
	WalletnodeImageMap = map[string][]string{
		"default": []string{
			"image_id",
			"expires_in",
		},
	}
)

// ValidateWalletnodeImage runs the validations defined on the viewed result
// type WalletnodeImage.
func ValidateWalletnodeImage(result *WalletnodeImage) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateWalletnodeImageView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateWalletnodeImageView runs the validations defined on
// WalletnodeImageView using the "default" view.
func ValidateWalletnodeImageView(result *WalletnodeImageView) (err error) {
	if result.ImageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_id", "result"))
	}
	if result.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "result"))
	}
	if result.ImageID != nil {
		if utf8.RuneCountInString(*result.ImageID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.image_id", *result.ImageID, utf8.RuneCountInString(*result.ImageID), 8, true))
		}
	}
	if result.ImageID != nil {
		if utf8.RuneCountInString(*result.ImageID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.image_id", *result.ImageID, utf8.RuneCountInString(*result.ImageID), 8, false))
		}
	}
	if result.ExpiresIn != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.expires_in", *result.ExpiresIn, goa.FormatDateTime))
	}
	return
}
