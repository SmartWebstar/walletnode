// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks service
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package artworks

import (
	"context"

	artworksviews "github.com/pastelnetwork/walletnode/api/gen/artworks/views"
	goa "goa.design/goa/v3/pkg"
)

// Pastel Artwork
type Service interface {
	// Registers a new art.
	Register(context.Context, *RegisterPayload) (res string, err error)
	// Upload an image that is used when registering the artwork.
	UploadImage(context.Context, *ImageUploadPayload) (res *WalletnodeImage, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "artworks"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"register", "uploadImage"}

// RegisterPayload is the payload type of the artworks service register method.
type RegisterPayload struct {
	// Name of the artwork
	Name string
	// Description of the artwork
	Description *string
	// Keywords
	Keywords *string
	// Series name
	SeriesName *string
	// Number of copies issued
	IssuedCopies int
	// Uploaded image ID
	ImageID string
	// Artwork creation video youtube URL
	YoutubeURL *string
	// Artist's PastelID
	ArtistPastelID string
	// Name of the artist
	ArtistName string
	// Artist website URL
	ArtistWebsiteURL *string
	// Spendable address
	SpendableAddress string
	NetworkFee       float32
}

// ImageUploadPayload is the payload type of the artworks service uploadImage
// method.
type ImageUploadPayload struct {
	// File to upload
	Bytes []byte
}

// WalletnodeImage is the result type of the artworks service uploadImage
// method.
type WalletnodeImage struct {
	// Uploaded image ID
	ImageID string
	// Image expiration
	ExpiresIn string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "InternalServerError",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewWalletnodeImage initializes result type WalletnodeImage from viewed
// result type WalletnodeImage.
func NewWalletnodeImage(vres *artworksviews.WalletnodeImage) *WalletnodeImage {
	return newWalletnodeImage(vres.Projected)
}

// NewViewedWalletnodeImage initializes viewed result type WalletnodeImage from
// result type WalletnodeImage using the given view.
func NewViewedWalletnodeImage(res *WalletnodeImage, view string) *artworksviews.WalletnodeImage {
	p := newWalletnodeImageView(res)
	return &artworksviews.WalletnodeImage{Projected: p, View: "default"}
}

// newWalletnodeImage converts projected type WalletnodeImage to service type
// WalletnodeImage.
func newWalletnodeImage(vres *artworksviews.WalletnodeImageView) *WalletnodeImage {
	res := &WalletnodeImage{}
	if vres.ImageID != nil {
		res.ImageID = *vres.ImageID
	}
	if vres.ExpiresIn != nil {
		res.ExpiresIn = *vres.ExpiresIn
	}
	return res
}

// newWalletnodeImageView projects result type WalletnodeImage to projected
// type WalletnodeImageView using the "default" view.
func newWalletnodeImageView(res *WalletnodeImage) *artworksviews.WalletnodeImageView {
	vres := &artworksviews.WalletnodeImageView{
		ImageID:   &res.ImageID,
		ExpiresIn: &res.ExpiresIn,
	}
	return vres
}
