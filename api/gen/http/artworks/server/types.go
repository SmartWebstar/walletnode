// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package server

import (
	"unicode/utf8"

	artworks "github.com/pastelnetwork/walletnode/api/gen/artworks"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "artworks" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// Name of the artwork
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the artwork
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	// Uploaded Image ID
	ImageID *string `form:"image_id,omitempty" json:"image_id,omitempty" xml:"image_id,omitempty"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelid *string `form:"artist_pastelid,omitempty" json:"artist_pastelid,omitempty" xml:"artist_pastelid,omitempty"`
	// Name of the artist
	ArtistName *string `form:"artist_name,omitempty" json:"artist_name,omitempty" xml:"artist_name,omitempty"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
	// Spendable address
	SpendableAddress *string  `form:"spendable_address,omitempty" json:"spendable_address,omitempty" xml:"spendable_address,omitempty"`
	NetworkFee       *float32 `form:"network_fee,omitempty" json:"network_fee,omitempty" xml:"network_fee,omitempty"`
}

// UploadImageRequestBody is the type of the "artworks" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	File []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
}

// UploadImageBadRequestResponseBody is the type of the "artworks" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string `form:"message" json:"message" xml:"message"`
	} `form:"error" json:"error" xml:"error"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "artworks"
// service "uploadImage" endpoint HTTP response body for the
// "InternalServerError" error.
type UploadImageInternalServerErrorResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string `form:"message" json:"message" xml:"message"`
	} `form:"error" json:"error" xml:"error"`
}

// NewUploadImageBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageBadRequestResponseBody(res *artworks.BadRequest) *UploadImageBadRequestResponseBody {
	body := &UploadImageBadRequestResponseBody{}
	if res.InnerError != nil {
		body.InnerError = &struct {
			// Code refers to a code number in the response header that indicates the
			// general classification of the response.
			Code int `form:"code" json:"code" xml:"code"`
			// Message is a human-readable explanation specific to this occurrence of the
			// problem.
			Message string `form:"message" json:"message" xml:"message"`
		}{
			Code:    res.InnerError.Code,
			Message: res.InnerError.Message,
		}
		{
			var zero string
			if body.InnerError.Message == zero {
				body.InnerError.Message = "Bad Request"
			}
		}
	}
	return body
}

// NewUploadImageInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageInternalServerErrorResponseBody(res *artworks.InternalServerError) *UploadImageInternalServerErrorResponseBody {
	body := &UploadImageInternalServerErrorResponseBody{}
	if res.InnerError != nil {
		body.InnerError = &struct {
			// Code refers to a code number in the response header that indicates the
			// general classification of the response.
			Code int `form:"code" json:"code" xml:"code"`
			// Message is a human-readable explanation specific to this occurrence of the
			// problem.
			Message string `form:"message" json:"message" xml:"message"`
		}{
			Code:    res.InnerError.Code,
			Message: res.InnerError.Message,
		}
		{
			var zero string
			if body.InnerError.Message == zero {
				body.InnerError.Message = "Internal Server Error"
			}
		}
	}
	return body
}

// NewRegisterPayload builds a artworks service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *artworks.RegisterPayload {
	v := &artworks.RegisterPayload{
		Name:             *body.Name,
		Description:      body.Description,
		Keywords:         body.Keywords,
		SeriesName:       body.SeriesName,
		IssuedCopies:     *body.IssuedCopies,
		ImageID:          *body.ImageID,
		YoutubeURL:       body.YoutubeURL,
		ArtistPastelid:   *body.ArtistPastelid,
		ArtistName:       *body.ArtistName,
		ArtistWebsiteURL: body.ArtistWebsiteURL,
		SpendableAddress: *body.SpendableAddress,
		NetworkFee:       *body.NetworkFee,
	}

	return v
}

// NewUploadImageImageUploadPayload builds a artworks service uploadImage
// endpoint payload.
func NewUploadImageImageUploadPayload(body *UploadImageRequestBody) *artworks.ImageUploadPayload {
	v := &artworks.ImageUploadPayload{
		File: body.File,
	}

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.ArtistName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_name", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.IssuedCopies == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issued_copies", "body"))
	}
	if body.ImageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_id", "body"))
	}
	if body.ArtistPastelid == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid", "body"))
	}
	if body.SpendableAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spendable_address", "body"))
	}
	if body.NetworkFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("network_fee", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 256, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1024, false))
		}
	}
	if body.Keywords != nil {
		if utf8.RuneCountInString(*body.Keywords) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", *body.Keywords, utf8.RuneCountInString(*body.Keywords), 256, false))
		}
	}
	if body.SeriesName != nil {
		if utf8.RuneCountInString(*body.SeriesName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.series_name", *body.SeriesName, utf8.RuneCountInString(*body.SeriesName), 256, false))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1, true))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1000, false))
		}
	}
	if body.YoutubeURL != nil {
		if utf8.RuneCountInString(*body.YoutubeURL) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.youtube_url", *body.YoutubeURL, utf8.RuneCountInString(*body.YoutubeURL), 128, false))
		}
	}
	if body.ArtistPastelid != nil {
		if utf8.RuneCountInString(*body.ArtistPastelid) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelid, utf8.RuneCountInString(*body.ArtistPastelid), 86, true))
		}
	}
	if body.ArtistPastelid != nil {
		if utf8.RuneCountInString(*body.ArtistPastelid) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelid, utf8.RuneCountInString(*body.ArtistPastelid), 86, false))
		}
	}
	if body.ArtistName != nil {
		if utf8.RuneCountInString(*body.ArtistName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_name", *body.ArtistName, utf8.RuneCountInString(*body.ArtistName), 256, false))
		}
	}
	if body.ArtistWebsiteURL != nil {
		if utf8.RuneCountInString(*body.ArtistWebsiteURL) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_website_url", *body.ArtistWebsiteURL, utf8.RuneCountInString(*body.ArtistWebsiteURL), 256, false))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, true))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, false))
		}
	}
	if body.NetworkFee != nil {
		if *body.NetworkFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.network_fee", *body.NetworkFee, 1e-05, true))
		}
	}
	return
}

// ValidateUploadImageRequestBody runs the validations defined on
// UploadImageRequestBody
func ValidateUploadImageRequestBody(body *UploadImageRequestBody) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}
