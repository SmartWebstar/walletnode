// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package server

import (
	"unicode/utf8"

	artworks "github.com/pastelnetwork/walletnode/api/gen/artworks"
	artworksviews "github.com/pastelnetwork/walletnode/api/gen/artworks/views"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "artworks" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// Name of the artwork
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the artwork
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	// Uploaded image ID
	ImageID *string `form:"image_id,omitempty" json:"image_id,omitempty" xml:"image_id,omitempty"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelID *string `form:"artist_pastelid,omitempty" json:"artist_pastelid,omitempty" xml:"artist_pastelid,omitempty"`
	// Name of the artist
	ArtistName *string `form:"artist_name,omitempty" json:"artist_name,omitempty" xml:"artist_name,omitempty"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
	// Spendable address
	SpendableAddress *string  `form:"spendable_address,omitempty" json:"spendable_address,omitempty" xml:"spendable_address,omitempty"`
	NetworkFee       *float32 `form:"network_fee,omitempty" json:"network_fee,omitempty" xml:"network_fee,omitempty"`
}

// UploadImageRequestBody is the type of the "artworks" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	Bytes []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
}

// RegisterResponseBody is the type of the "artworks" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// Job ID of the registration process
	JobID int `form:"job_id" json:"job_id" xml:"job_id"`
}

// RegisterJobStateResponseBody is the type of the "artworks" service
// "registerJobState" endpoint HTTP response body.
type RegisterJobStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// RegisterJobResponseBody is the type of the "artworks" service "registerJob"
// endpoint HTTP response body.
type RegisterJobResponseBody struct {
	// JOb ID of the registration process
	ID int `form:"id" json:"id" xml:"id"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
	// List of states from the very beginning of the process
	States []*JobStateResponseBody `form:"states,omitempty" json:"states,omitempty" xml:"states,omitempty"`
	// txid
	Txid *string `form:"txid,omitempty" json:"txid,omitempty" xml:"txid,omitempty"`
}

// JobResponseTinyCollection is the type of the "artworks" service
// "registerJobs" endpoint HTTP response body.
type JobResponseTinyCollection []*JobResponseTiny

// UploadImageResponseBody is the type of the "artworks" service "uploadImage"
// endpoint HTTP response body.
type UploadImageResponseBody struct {
	// Uploaded image ID
	ImageID string `form:"image_id" json:"image_id" xml:"image_id"`
	// Image expiration
	ExpiresIn string `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// RegisterBadRequestResponseBody is the type of the "artworks" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterInternalServerErrorResponseBody is the type of the "artworks"
// service "register" endpoint HTTP response body for the "InternalServerError"
// error.
type RegisterInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterJobStateNotFoundResponseBody is the type of the "artworks" service
// "registerJobState" endpoint HTTP response body for the "NotFound" error.
type RegisterJobStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterJobStateInternalServerErrorResponseBody is the type of the
// "artworks" service "registerJobState" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterJobStateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterJobNotFoundResponseBody is the type of the "artworks" service
// "registerJob" endpoint HTTP response body for the "NotFound" error.
type RegisterJobNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterJobInternalServerErrorResponseBody is the type of the "artworks"
// service "registerJob" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterJobInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterJobsInternalServerErrorResponseBody is the type of the "artworks"
// service "registerJobs" endpoint HTTP response body for the
// "InternalServerError" error.
type RegisterJobsInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageBadRequestResponseBody is the type of the "artworks" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "artworks"
// service "uploadImage" endpoint HTTP response body for the
// "InternalServerError" error.
type UploadImageInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// JobStateResponseBody is used to define fields on response body types.
type JobStateResponseBody struct {
	// Date of the status creation
	Date string `form:"date" json:"date" xml:"date"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
}

// JobResponseTiny is used to define fields on response body types.
type JobResponseTiny struct {
	// JOb ID of the registration process
	ID int `form:"id" json:"id" xml:"id"`
	// Status of the registration process
	Status string `form:"status" json:"status" xml:"status"`
	// txid
	Txid *string `form:"txid,omitempty" json:"txid,omitempty" xml:"txid,omitempty"`
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "artworks" service.
func NewRegisterResponseBody(res *artworksviews.RegisterResultView) *RegisterResponseBody {
	body := &RegisterResponseBody{
		JobID: *res.JobID,
	}
	return body
}

// NewRegisterJobStateResponseBody builds the HTTP response body from the
// result of the "registerJobState" endpoint of the "artworks" service.
func NewRegisterJobStateResponseBody(res *artworks.JobState) *RegisterJobStateResponseBody {
	body := &RegisterJobStateResponseBody{
		Date:   res.Date,
		Status: res.Status,
	}
	return body
}

// NewRegisterJobResponseBody builds the HTTP response body from the result of
// the "registerJob" endpoint of the "artworks" service.
func NewRegisterJobResponseBody(res *artworksviews.JobView) *RegisterJobResponseBody {
	body := &RegisterJobResponseBody{
		ID:     *res.ID,
		Status: *res.Status,
		Txid:   res.Txid,
	}
	if res.States != nil {
		body.States = make([]*JobStateResponseBody, len(res.States))
		for i, val := range res.States {
			body.States[i] = marshalArtworksviewsJobStateViewToJobStateResponseBody(val)
		}
	}
	return body
}

// NewJobResponseTinyCollection builds the HTTP response body from the result
// of the "registerJobs" endpoint of the "artworks" service.
func NewJobResponseTinyCollection(res artworksviews.JobCollectionView) JobResponseTinyCollection {
	body := make([]*JobResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalArtworksviewsJobViewToJobResponseTiny(val)
	}
	return body
}

// NewUploadImageResponseBody builds the HTTP response body from the result of
// the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageResponseBody(res *artworksviews.ImageView) *UploadImageResponseBody {
	body := &UploadImageResponseBody{
		ImageID:   *res.ImageID,
		ExpiresIn: *res.ExpiresIn,
	}
	return body
}

// NewRegisterBadRequestResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "artworks" service.
func NewRegisterBadRequestResponseBody(res *goa.ServiceError) *RegisterBadRequestResponseBody {
	body := &RegisterBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "register" endpoint of the "artworks" service.
func NewRegisterInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterInternalServerErrorResponseBody {
	body := &RegisterInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterJobStateNotFoundResponseBody builds the HTTP response body from
// the result of the "registerJobState" endpoint of the "artworks" service.
func NewRegisterJobStateNotFoundResponseBody(res *goa.ServiceError) *RegisterJobStateNotFoundResponseBody {
	body := &RegisterJobStateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterJobStateInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "registerJobState" endpoint of the "artworks"
// service.
func NewRegisterJobStateInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterJobStateInternalServerErrorResponseBody {
	body := &RegisterJobStateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterJobNotFoundResponseBody builds the HTTP response body from the
// result of the "registerJob" endpoint of the "artworks" service.
func NewRegisterJobNotFoundResponseBody(res *goa.ServiceError) *RegisterJobNotFoundResponseBody {
	body := &RegisterJobNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterJobInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "registerJob" endpoint of the "artworks" service.
func NewRegisterJobInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterJobInternalServerErrorResponseBody {
	body := &RegisterJobInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterJobsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "registerJobs" endpoint of the "artworks" service.
func NewRegisterJobsInternalServerErrorResponseBody(res *goa.ServiceError) *RegisterJobsInternalServerErrorResponseBody {
	body := &RegisterJobsInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageBadRequestResponseBody(res *goa.ServiceError) *UploadImageBadRequestResponseBody {
	body := &UploadImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadImageInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageInternalServerErrorResponseBody(res *goa.ServiceError) *UploadImageInternalServerErrorResponseBody {
	body := &UploadImageInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterPayload builds a artworks service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *artworks.RegisterPayload {
	v := &artworks.RegisterPayload{
		Name:             *body.Name,
		Description:      body.Description,
		Keywords:         body.Keywords,
		SeriesName:       body.SeriesName,
		IssuedCopies:     *body.IssuedCopies,
		ImageID:          *body.ImageID,
		YoutubeURL:       body.YoutubeURL,
		ArtistPastelID:   *body.ArtistPastelID,
		ArtistName:       *body.ArtistName,
		ArtistWebsiteURL: body.ArtistWebsiteURL,
		SpendableAddress: *body.SpendableAddress,
		NetworkFee:       *body.NetworkFee,
	}

	return v
}

// NewRegisterJobStatePayload builds a artworks service registerJobState
// endpoint payload.
func NewRegisterJobStatePayload(jobID int) *artworks.RegisterJobStatePayload {
	v := &artworks.RegisterJobStatePayload{}
	v.JobID = jobID

	return v
}

// NewRegisterJobPayload builds a artworks service registerJob endpoint payload.
func NewRegisterJobPayload(jobID int) *artworks.RegisterJobPayload {
	v := &artworks.RegisterJobPayload{}
	v.JobID = jobID

	return v
}

// NewUploadImagePayload builds a artworks service uploadImage endpoint payload.
func NewUploadImagePayload(body *UploadImageRequestBody) *artworks.UploadImagePayload {
	v := &artworks.UploadImagePayload{
		Bytes: body.Bytes,
	}

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.ArtistName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_name", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.IssuedCopies == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issued_copies", "body"))
	}
	if body.ImageID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_id", "body"))
	}
	if body.ArtistPastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("artist_pastelid", "body"))
	}
	if body.SpendableAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("spendable_address", "body"))
	}
	if body.NetworkFee == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("network_fee", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 256, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 1024, false))
		}
	}
	if body.Keywords != nil {
		if utf8.RuneCountInString(*body.Keywords) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.keywords", *body.Keywords, utf8.RuneCountInString(*body.Keywords), 256, false))
		}
	}
	if body.SeriesName != nil {
		if utf8.RuneCountInString(*body.SeriesName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.series_name", *body.SeriesName, utf8.RuneCountInString(*body.SeriesName), 256, false))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1, true))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1000, false))
		}
	}
	if body.ImageID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.image_id", *body.ImageID, "^[a-zA-Z0-9]+$"))
	}
	if body.ImageID != nil {
		if utf8.RuneCountInString(*body.ImageID) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_id", *body.ImageID, utf8.RuneCountInString(*body.ImageID), 8, true))
		}
	}
	if body.ImageID != nil {
		if utf8.RuneCountInString(*body.ImageID) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.image_id", *body.ImageID, utf8.RuneCountInString(*body.ImageID), 8, false))
		}
	}
	if body.YoutubeURL != nil {
		if utf8.RuneCountInString(*body.YoutubeURL) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.youtube_url", *body.YoutubeURL, utf8.RuneCountInString(*body.YoutubeURL), 128, false))
		}
	}
	if body.ArtistPastelID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.artist_pastelid", *body.ArtistPastelID, "^[a-zA-Z0-9]+$"))
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) < 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, true))
		}
	}
	if body.ArtistPastelID != nil {
		if utf8.RuneCountInString(*body.ArtistPastelID) > 86 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_pastelid", *body.ArtistPastelID, utf8.RuneCountInString(*body.ArtistPastelID), 86, false))
		}
	}
	if body.ArtistName != nil {
		if utf8.RuneCountInString(*body.ArtistName) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_name", *body.ArtistName, utf8.RuneCountInString(*body.ArtistName), 256, false))
		}
	}
	if body.ArtistWebsiteURL != nil {
		if utf8.RuneCountInString(*body.ArtistWebsiteURL) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_website_url", *body.ArtistWebsiteURL, utf8.RuneCountInString(*body.ArtistWebsiteURL), 256, false))
		}
	}
	if body.SpendableAddress != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.spendable_address", *body.SpendableAddress, "^[a-zA-Z0-9]+$"))
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) < 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, true))
		}
	}
	if body.SpendableAddress != nil {
		if utf8.RuneCountInString(*body.SpendableAddress) > 35 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.spendable_address", *body.SpendableAddress, utf8.RuneCountInString(*body.SpendableAddress), 35, false))
		}
	}
	if body.NetworkFee != nil {
		if *body.NetworkFee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.network_fee", *body.NetworkFee, 1e-05, true))
		}
	}
	return
}

// ValidateUploadImageRequestBody runs the validations defined on
// UploadImageRequestBody
func ValidateUploadImageRequestBody(body *UploadImageRequestBody) (err error) {
	if body.Bytes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}
