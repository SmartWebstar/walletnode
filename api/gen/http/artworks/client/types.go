// Code generated by goa v3.3.1, DO NOT EDIT.
//
// artworks HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package client

import (
	artworks "github.com/pastelnetwork/walletnode/api/gen/artworks"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "artworks" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// Name of the artwork
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the artwork
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Keywords
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
	// Series name
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" xml:"series_name,omitempty"`
	// Number of copies issued
	IssuedCopies int `form:"issued_copies" json:"issued_copies" xml:"issued_copies"`
	// Uploaded Image ID
	ImageID string `form:"image_id" json:"image_id" xml:"image_id"`
	// Artwork creation video youtube URL
	YoutubeURL *string `form:"youtube_url,omitempty" json:"youtube_url,omitempty" xml:"youtube_url,omitempty"`
	// Artist's PastelID
	ArtistPastelid string `form:"artist_pastelid" json:"artist_pastelid" xml:"artist_pastelid"`
	// Name of the artist
	ArtistName string `form:"artist_name" json:"artist_name" xml:"artist_name"`
	// Artist website URL
	ArtistWebsiteURL *string `form:"artist_website_url,omitempty" json:"artist_website_url,omitempty" xml:"artist_website_url,omitempty"`
	// Spendable address
	SpendableAddress string  `form:"spendable_address" json:"spendable_address" xml:"spendable_address"`
	NetworkFee       float32 `form:"network_fee" json:"network_fee" xml:"network_fee"`
}

// UploadImageRequestBody is the type of the "artworks" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	File []byte `form:"file" json:"file" xml:"file"`
}

// UploadImageBadRequestResponseBody is the type of the "artworks" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code *int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message *string `form:"message" json:"message" xml:"message"`
	} `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "artworks"
// service "uploadImage" endpoint HTTP response body for the
// "InternalServerError" error.
type UploadImageInternalServerErrorResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code *int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message *string `form:"message" json:"message" xml:"message"`
	} `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "artworks" service.
func NewRegisterRequestBody(p *artworks.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		Name:             p.Name,
		Description:      p.Description,
		Keywords:         p.Keywords,
		SeriesName:       p.SeriesName,
		IssuedCopies:     p.IssuedCopies,
		ImageID:          p.ImageID,
		YoutubeURL:       p.YoutubeURL,
		ArtistPastelid:   p.ArtistPastelid,
		ArtistName:       p.ArtistName,
		ArtistWebsiteURL: p.ArtistWebsiteURL,
		SpendableAddress: p.SpendableAddress,
		NetworkFee:       p.NetworkFee,
	}
	return body
}

// NewUploadImageRequestBody builds the HTTP request body from the payload of
// the "uploadImage" endpoint of the "artworks" service.
func NewUploadImageRequestBody(p *artworks.ImageUploadPayload) *UploadImageRequestBody {
	body := &UploadImageRequestBody{
		File: p.File,
	}
	return body
}

// NewUploadImageBadRequest builds a artworks service uploadImage endpoint
// BadRequest error.
func NewUploadImageBadRequest(body *UploadImageBadRequestResponseBody) *artworks.BadRequest {
	v := &artworks.BadRequest{}
	v.InnerError = &struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string
	}{
		Code: *body.InnerError.Code,
	}
	if body.InnerError.Message != nil {
		v.InnerError.Message = *body.InnerError.Message
	}
	if body.InnerError.Message == nil {
		v.InnerError.Message = "Bad Request"
	}

	return v
}

// NewUploadImageInternalServerError builds a artworks service uploadImage
// endpoint InternalServerError error.
func NewUploadImageInternalServerError(body *UploadImageInternalServerErrorResponseBody) *artworks.InternalServerError {
	v := &artworks.InternalServerError{}
	v.InnerError = &struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string
	}{
		Code: *body.InnerError.Code,
	}
	if body.InnerError.Message != nil {
		v.InnerError.Message = *body.InnerError.Message
	}
	if body.InnerError.Message == nil {
		v.InnerError.Message = "Internal Server Error"
	}

	return v
}

// ValidateUploadImageBadRequestResponseBody runs the validations defined on
// uploadImage_BadRequest_response_body
func ValidateUploadImageBadRequestResponseBody(body *UploadImageBadRequestResponseBody) (err error) {
	if body.InnerError == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.InnerError != nil {
		if body.InnerError.Code == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "body.error"))
		}
	}
	return
}

// ValidateUploadImageInternalServerErrorResponseBody runs the validations
// defined on uploadImage_InternalServerError_response_body
func ValidateUploadImageInternalServerErrorResponseBody(body *UploadImageInternalServerErrorResponseBody) (err error) {
	if body.InnerError == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.InnerError != nil {
		if body.InnerError.Code == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "body.error"))
		}
	}
	return
}
