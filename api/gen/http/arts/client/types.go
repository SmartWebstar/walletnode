// Code generated by goa v3.3.1, DO NOT EDIT.
//
// arts HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package client

import (
	arts "github.com/pastelnetwork/walletnode/api/gen/arts"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "arts" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Name of the artist
	ArtistName *string `form:"artist_name,omitempty" json:"artist_name,omitempty" xml:"artist_name,omitempty"`
	// Name of the artwork
	ArtworkName *string `form:"artwork_name,omitempty" json:"artwork_name,omitempty" xml:"artwork_name,omitempty"`
	// Number of copies issued
	IssuedCopies int      `form:"issued_copies" json:"issued_copies" xml:"issued_copies"`
	Fee          *float32 `form:"fee,omitempty" json:"fee,omitempty" xml:"fee,omitempty"`
	// PastelID
	PastelID *string `form:"pastel_id,omitempty" json:"pastel_id,omitempty" xml:"pastel_id,omitempty"`
	// Spendable address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// UploadImageRequestBody is the type of the "arts" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	File []byte `form:"file" json:"file" xml:"file"`
}

// UploadImageBadRequestResponseBody is the type of the "arts" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code *int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message *string `form:"message" json:"message" xml:"message"`
	} `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "arts" service
// "uploadImage" endpoint HTTP response body for the "InternalServerError"
// error.
type UploadImageInternalServerErrorResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code *int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message *string `form:"message" json:"message" xml:"message"`
	} `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "arts" service.
func NewRegisterRequestBody(p *arts.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{
		ArtistName:   p.ArtistName,
		ArtworkName:  p.ArtworkName,
		IssuedCopies: p.IssuedCopies,
		Fee:          p.Fee,
		PastelID:     p.PastelID,
		Address:      p.Address,
	}
	{
		var zero int
		if body.IssuedCopies == zero {
			body.IssuedCopies = 1
		}
	}
	return body
}

// NewUploadImageRequestBody builds the HTTP request body from the payload of
// the "uploadImage" endpoint of the "arts" service.
func NewUploadImageRequestBody(p *arts.ImageUploadPayload) *UploadImageRequestBody {
	body := &UploadImageRequestBody{
		File: p.File,
	}
	return body
}

// NewUploadImageBadRequest builds a arts service uploadImage endpoint
// BadRequest error.
func NewUploadImageBadRequest(body *UploadImageBadRequestResponseBody) *arts.BadRequest {
	v := &arts.BadRequest{}
	v.InnerError = &struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string
	}{
		Code: *body.InnerError.Code,
	}
	if body.InnerError.Message != nil {
		v.InnerError.Message = *body.InnerError.Message
	}
	if body.InnerError.Message == nil {
		v.InnerError.Message = "Bad Request"
	}

	return v
}

// NewUploadImageInternalServerError builds a arts service uploadImage endpoint
// InternalServerError error.
func NewUploadImageInternalServerError(body *UploadImageInternalServerErrorResponseBody) *arts.InternalServerError {
	v := &arts.InternalServerError{}
	v.InnerError = &struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string
	}{
		Code: *body.InnerError.Code,
	}
	if body.InnerError.Message != nil {
		v.InnerError.Message = *body.InnerError.Message
	}
	if body.InnerError.Message == nil {
		v.InnerError.Message = "Internal Server Error"
	}

	return v
}

// ValidateUploadImageBadRequestResponseBody runs the validations defined on
// uploadImage_BadRequest_response_body
func ValidateUploadImageBadRequestResponseBody(body *UploadImageBadRequestResponseBody) (err error) {
	if body.InnerError == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.InnerError != nil {
		if body.InnerError.Code == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "body.error"))
		}
	}
	return
}

// ValidateUploadImageInternalServerErrorResponseBody runs the validations
// defined on uploadImage_InternalServerError_response_body
func ValidateUploadImageInternalServerErrorResponseBody(body *UploadImageInternalServerErrorResponseBody) (err error) {
	if body.InnerError == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	if body.InnerError != nil {
		if body.InnerError.Code == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "body.error"))
		}
	}
	return
}
