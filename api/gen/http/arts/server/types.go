// Code generated by goa v3.3.1, DO NOT EDIT.
//
// arts HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package server

import (
	"unicode/utf8"

	arts "github.com/pastelnetwork/walletnode/api/gen/arts"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "arts" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Name of the artist
	ArtistName *string `form:"artist_name,omitempty" json:"artist_name,omitempty" xml:"artist_name,omitempty"`
	// Name of the artwork
	ArtworkName *string `form:"artwork_name,omitempty" json:"artwork_name,omitempty" xml:"artwork_name,omitempty"`
	// Number of copies issued
	IssuedCopies *int     `form:"issued_copies,omitempty" json:"issued_copies,omitempty" xml:"issued_copies,omitempty"`
	Fee          *float32 `form:"fee,omitempty" json:"fee,omitempty" xml:"fee,omitempty"`
	// PastelID
	PastelID *string `form:"pastel_id,omitempty" json:"pastel_id,omitempty" xml:"pastel_id,omitempty"`
	// Spendable address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// UploadImageRequestBody is the type of the "arts" service "uploadImage"
// endpoint HTTP request body.
type UploadImageRequestBody struct {
	// File to upload
	File []byte `form:"file,omitempty" json:"file,omitempty" xml:"file,omitempty"`
}

// UploadImageBadRequestResponseBody is the type of the "arts" service
// "uploadImage" endpoint HTTP response body for the "BadRequest" error.
type UploadImageBadRequestResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string `form:"message" json:"message" xml:"message"`
	} `form:"error" json:"error" xml:"error"`
}

// UploadImageInternalServerErrorResponseBody is the type of the "arts" service
// "uploadImage" endpoint HTTP response body for the "InternalServerError"
// error.
type UploadImageInternalServerErrorResponseBody struct {
	InnerError *struct {
		// Code refers to a code number in the response header that indicates the
		// general classification of the response.
		Code int `form:"code" json:"code" xml:"code"`
		// Message is a human-readable explanation specific to this occurrence of the
		// problem.
		Message string `form:"message" json:"message" xml:"message"`
	} `form:"error" json:"error" xml:"error"`
}

// NewUploadImageBadRequestResponseBody builds the HTTP response body from the
// result of the "uploadImage" endpoint of the "arts" service.
func NewUploadImageBadRequestResponseBody(res *arts.BadRequest) *UploadImageBadRequestResponseBody {
	body := &UploadImageBadRequestResponseBody{}
	if res.InnerError != nil {
		body.InnerError = &struct {
			// Code refers to a code number in the response header that indicates the
			// general classification of the response.
			Code int `form:"code" json:"code" xml:"code"`
			// Message is a human-readable explanation specific to this occurrence of the
			// problem.
			Message string `form:"message" json:"message" xml:"message"`
		}{
			Code:    res.InnerError.Code,
			Message: res.InnerError.Message,
		}
		{
			var zero string
			if body.InnerError.Message == zero {
				body.InnerError.Message = "Bad Request"
			}
		}
	}
	return body
}

// NewUploadImageInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "uploadImage" endpoint of the "arts" service.
func NewUploadImageInternalServerErrorResponseBody(res *arts.InternalServerError) *UploadImageInternalServerErrorResponseBody {
	body := &UploadImageInternalServerErrorResponseBody{}
	if res.InnerError != nil {
		body.InnerError = &struct {
			// Code refers to a code number in the response header that indicates the
			// general classification of the response.
			Code int `form:"code" json:"code" xml:"code"`
			// Message is a human-readable explanation specific to this occurrence of the
			// problem.
			Message string `form:"message" json:"message" xml:"message"`
		}{
			Code:    res.InnerError.Code,
			Message: res.InnerError.Message,
		}
		{
			var zero string
			if body.InnerError.Message == zero {
				body.InnerError.Message = "Internal Server Error"
			}
		}
	}
	return body
}

// NewRegisterPayload builds a arts service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *arts.RegisterPayload {
	v := &arts.RegisterPayload{
		ArtistName:  body.ArtistName,
		ArtworkName: body.ArtworkName,
		Fee:         body.Fee,
		PastelID:    body.PastelID,
		Address:     body.Address,
	}
	if body.IssuedCopies != nil {
		v.IssuedCopies = *body.IssuedCopies
	}
	if body.IssuedCopies == nil {
		v.IssuedCopies = 1
	}

	return v
}

// NewUploadImageImageUploadPayload builds a arts service uploadImage endpoint
// payload.
func NewUploadImageImageUploadPayload(body *UploadImageRequestBody) *arts.ImageUploadPayload {
	v := &arts.ImageUploadPayload{
		File: body.File,
	}

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.ArtistName != nil {
		if utf8.RuneCountInString(*body.ArtistName) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artist_name", *body.ArtistName, utf8.RuneCountInString(*body.ArtistName), 32, false))
		}
	}
	if body.ArtworkName != nil {
		if utf8.RuneCountInString(*body.ArtworkName) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.artwork_name", *body.ArtworkName, utf8.RuneCountInString(*body.ArtworkName), 32, false))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1, true))
		}
	}
	if body.IssuedCopies != nil {
		if *body.IssuedCopies > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.issued_copies", *body.IssuedCopies, 1000, false))
		}
	}
	if body.Fee != nil {
		if *body.Fee < 1e-05 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.fee", *body.Fee, 1e-05, true))
		}
	}
	if body.PastelID != nil {
		if utf8.RuneCountInString(*body.PastelID) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_id", *body.PastelID, utf8.RuneCountInString(*body.PastelID), 32, false))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 32, false))
		}
	}
	return
}

// ValidateUploadImageRequestBody runs the validations defined on
// UploadImageRequestBody
func ValidateUploadImageRequestBody(body *UploadImageRequestBody) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	return
}
