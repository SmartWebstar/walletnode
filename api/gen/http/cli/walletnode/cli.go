// Code generated by goa v3.3.1, DO NOT EDIT.
//
// walletnode HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	artsc "github.com/pastelnetwork/walletnode/api/gen/http/arts/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `arts (register|upload-image)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` arts register --body '{
      "address": "12349231421309dsfdf",
      "artist_name": "Leonardo da Vinci",
      "artwork_name": "Mona Lisa",
      "fee": 100,
      "issued_copies": 5,
      "pastel_id": "123456789"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	artsUploadImageEncoderFn artsc.ArtsUploadImageEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		artsFlags = flag.NewFlagSet("arts", flag.ContinueOnError)

		artsRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		artsRegisterBodyFlag = artsRegisterFlags.String("body", "REQUIRED", "")

		artsUploadImageFlags    = flag.NewFlagSet("upload-image", flag.ExitOnError)
		artsUploadImageBodyFlag = artsUploadImageFlags.String("body", "REQUIRED", "")
	)
	artsFlags.Usage = artsUsage
	artsRegisterFlags.Usage = artsRegisterUsage
	artsUploadImageFlags.Usage = artsUploadImageUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "arts":
			svcf = artsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "arts":
			switch epn {
			case "register":
				epf = artsRegisterFlags

			case "upload-image":
				epf = artsUploadImageFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "arts":
			c := artsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register":
				endpoint = c.Register()
				data, err = artsc.BuildRegisterPayload(*artsRegisterBodyFlag)
			case "upload-image":
				endpoint = c.UploadImage(artsUploadImageEncoderFn)
				data, err = artsc.BuildUploadImagePayload(*artsUploadImageBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// artsUsage displays the usage of the arts command and its subcommands.
func artsUsage() {
	fmt.Fprintf(os.Stderr, `Pastel Artwork
Usage:
    %s [globalflags] arts COMMAND [flags]

COMMAND:
    register: Registers a new art.
    upload-image: Upload an image that is used when registering the artwork.

Additional help:
    %s arts COMMAND --help
`, os.Args[0], os.Args[0])
}
func artsRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] arts register -body JSON

Registers a new art.
    -body JSON: 

Example:
    `+os.Args[0]+` arts register --body '{
      "address": "12349231421309dsfdf",
      "artist_name": "Leonardo da Vinci",
      "artwork_name": "Mona Lisa",
      "fee": 100,
      "issued_copies": 5,
      "pastel_id": "123456789"
   }'
`, os.Args[0])
}

func artsUploadImageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] arts upload-image -body JSON

Upload an image that is used when registering the artwork.
    -body JSON: 

Example:
    `+os.Args[0]+` arts upload-image --body '{
      "file": "TWF4aW1lIGV0Lg=="
   }'
`, os.Args[0])
}
