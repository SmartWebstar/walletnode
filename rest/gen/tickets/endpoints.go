// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets endpoints
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package tickets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "tickets" service endpoints.
type Endpoints struct {
	Add  goa.Endpoint
	List goa.Endpoint
}

// NewEndpoints wraps the methods of the "tickets" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Add:  NewAddEndpoint(s),
		List: NewListEndpoint(s),
	}
}

// Use applies the given middleware to all the "tickets" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Add = m(e.Add)
	e.List = m(e.List)
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "tickets".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddPayload)
		return s.Add(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "tickets".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.List(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredTicketCollection(res, "default")
		return vres, nil
	}
}
