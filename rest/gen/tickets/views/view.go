// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets views
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// StoredTicketCollection is the viewed result type that is projected based on
// a view.
type StoredTicketCollection struct {
	// Type to project
	Projected StoredTicketCollectionView
	// View to render
	View string
}

// StoredTicketCollectionView is a type that runs validations on a projected
// type.
type StoredTicketCollectionView []*StoredTicketView

// StoredTicketView is a type that runs validations on a projected type.
type StoredTicketView struct {
	// Address
	Address *string
	// PastelID
	PastelID *string
	// Signature
	Signature *string
}

var (
	// StoredTicketCollectionMap is a map of attribute names in result type
	// StoredTicketCollection indexed by view name.
	StoredTicketCollectionMap = map[string][]string{
		"default": []string{
			"address",
			"pastel_id",
			"signature",
		},
	}
	// StoredTicketMap is a map of attribute names in result type StoredTicket
	// indexed by view name.
	StoredTicketMap = map[string][]string{
		"default": []string{
			"address",
			"pastel_id",
			"signature",
		},
	}
)

// ValidateStoredTicketCollection runs the validations defined on the viewed
// result type StoredTicketCollection.
func ValidateStoredTicketCollection(result StoredTicketCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredTicketCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStoredTicketCollectionView runs the validations defined on
// StoredTicketCollectionView using the "default" view.
func ValidateStoredTicketCollectionView(result StoredTicketCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredTicketView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredTicketView runs the validations defined on StoredTicketView
// using the "default" view.
func ValidateStoredTicketView(result *StoredTicketView) (err error) {
	if result.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "result"))
	}
	if result.PastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pastel_id", "result"))
	}
	if result.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "result"))
	}
	if result.Address != nil {
		if utf8.RuneCountInString(*result.Address) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.address", *result.Address, utf8.RuneCountInString(*result.Address), 32, false))
		}
	}
	if result.PastelID != nil {
		if utf8.RuneCountInString(*result.PastelID) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.pastel_id", *result.PastelID, utf8.RuneCountInString(*result.PastelID), 32, false))
		}
	}
	return
}
