// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets service
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package tickets

import (
	"context"

	ticketsviews "github.com/pastelnetwork/walletnode/rest/gen/tickets/views"
)

// The tickets serves tickets data.
type Service interface {
	// Add a new ticket and return its ID.
	Add(context.Context, *AddPayload) (res string, err error)
	// List all stored tickets.
	List(context.Context) (res StoredTicketCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "tickets"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"add", "list"}

// AddPayload is the payload type of the tickets service add method.
type AddPayload struct {
	// Address
	Address *string
	// PastelID
	PastelID *string
	// Signature
	Signature *string
}

// StoredTicketCollection is the result type of the tickets service list method.
type StoredTicketCollection []*StoredTicket

// StoredTicket describes a ticket retrieved by the ticket service.
type StoredTicket struct {
	// Address
	Address string
	// PastelID
	PastelID string
	// Signature
	Signature string
}

// NewStoredTicketCollection initializes result type StoredTicketCollection
// from viewed result type StoredTicketCollection.
func NewStoredTicketCollection(vres ticketsviews.StoredTicketCollection) StoredTicketCollection {
	return newStoredTicketCollection(vres.Projected)
}

// NewViewedStoredTicketCollection initializes viewed result type
// StoredTicketCollection from result type StoredTicketCollection using the
// given view.
func NewViewedStoredTicketCollection(res StoredTicketCollection, view string) ticketsviews.StoredTicketCollection {
	p := newStoredTicketCollectionView(res)
	return ticketsviews.StoredTicketCollection{Projected: p, View: "default"}
}

// newStoredTicketCollection converts projected type StoredTicketCollection to
// service type StoredTicketCollection.
func newStoredTicketCollection(vres ticketsviews.StoredTicketCollectionView) StoredTicketCollection {
	res := make(StoredTicketCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredTicket(n)
	}
	return res
}

// newStoredTicketCollectionView projects result type StoredTicketCollection to
// projected type StoredTicketCollectionView using the "default" view.
func newStoredTicketCollectionView(res StoredTicketCollection) ticketsviews.StoredTicketCollectionView {
	vres := make(ticketsviews.StoredTicketCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredTicketView(n)
	}
	return vres
}

// newStoredTicket converts projected type StoredTicket to service type
// StoredTicket.
func newStoredTicket(vres *ticketsviews.StoredTicketView) *StoredTicket {
	res := &StoredTicket{}
	if vres.Address != nil {
		res.Address = *vres.Address
	}
	if vres.PastelID != nil {
		res.PastelID = *vres.PastelID
	}
	if vres.Signature != nil {
		res.Signature = *vres.Signature
	}
	return res
}

// newStoredTicketView projects result type StoredTicket to projected type
// StoredTicketView using the "default" view.
func newStoredTicketView(res *StoredTicket) *ticketsviews.StoredTicketView {
	vres := &ticketsviews.StoredTicketView{
		Address:   &res.Address,
		PastelID:  &res.PastelID,
		Signature: &res.Signature,
	}
	return vres
}
