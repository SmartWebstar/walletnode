// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets HTTP client CLI support package
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	tickets "github.com/pastelnetwork/walletnode/rest/gen/tickets"
	goa "goa.design/goa/v3/pkg"
)

// BuildAddPayload builds the payload for the tickets add endpoint from CLI
// flags.
func BuildAddPayload(ticketsAddBody string) (*tickets.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(ticketsAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"u40\",\n      \"pastel_id\": \"123456789\",\n      \"signature\": \"wdk231r23kkl23rn23jk423nkl.\"\n   }'")
		}
		if body.Address != nil {
			if utf8.RuneCountInString(*body.Address) > 32 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 32, false))
			}
		}
		if body.PastelID != nil {
			if utf8.RuneCountInString(*body.PastelID) > 32 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_id", *body.PastelID, utf8.RuneCountInString(*body.PastelID), 32, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &tickets.AddPayload{
		Address:   body.Address,
		PastelID:  body.PastelID,
		Signature: body.Signature,
	}

	return v, nil
}
