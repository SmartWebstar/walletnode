// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets HTTP client types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package client

import (
	"unicode/utf8"

	tickets "github.com/pastelnetwork/walletnode/rest/gen/tickets"
	ticketsviews "github.com/pastelnetwork/walletnode/rest/gen/tickets/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "tickets" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// PastelID
	PastelID *string `form:"pastel_id,omitempty" json:"pastel_id,omitempty" xml:"pastel_id,omitempty"`
	// Signature
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// ListResponseBody is the type of the "tickets" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredTicketResponse

// StoredTicketResponse is used to define fields on response body types.
type StoredTicketResponse struct {
	// Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// PastelID
	PastelID *string `form:"pastel_id,omitempty" json:"pastel_id,omitempty" xml:"pastel_id,omitempty"`
	// Signature
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "tickets" service.
func NewAddRequestBody(p *tickets.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Address:   p.Address,
		PastelID:  p.PastelID,
		Signature: p.Signature,
	}
	return body
}

// NewListStoredTicketCollectionOK builds a "tickets" service "list" endpoint
// result from a HTTP "OK" response.
func NewListStoredTicketCollectionOK(body ListResponseBody) ticketsviews.StoredTicketCollectionView {
	v := make([]*ticketsviews.StoredTicketView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredTicketResponseToTicketsviewsStoredTicketView(val)
	}
	return v
}

// ValidateStoredTicketResponse runs the validations defined on
// StoredTicketResponse
func ValidateStoredTicketResponse(body *StoredTicketResponse) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.PastelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pastel_id", "body"))
	}
	if body.Signature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("signature", "body"))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 32, false))
		}
	}
	if body.PastelID != nil {
		if utf8.RuneCountInString(*body.PastelID) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_id", *body.PastelID, utf8.RuneCountInString(*body.PastelID), 32, false))
		}
	}
	return
}
