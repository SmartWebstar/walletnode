// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package server

import (
	"context"
	"io"
	"net/http"

	ticketsviews "github.com/pastelnetwork/walletnode/rest/gen/tickets/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddResponse returns an encoder for responses returned by the tickets
// add endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the tickets add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddPayload(&body)

		return payload, nil
	}
}

// EncodeListResponse returns an encoder for responses returned by the tickets
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(ticketsviews.StoredTicketCollection)
		enc := encoder(ctx, w)
		body := NewStoredTicketResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalTicketsviewsStoredTicketViewToStoredTicketResponse builds a value of
// type *StoredTicketResponse from a value of type
// *ticketsviews.StoredTicketView.
func marshalTicketsviewsStoredTicketViewToStoredTicketResponse(v *ticketsviews.StoredTicketView) *StoredTicketResponse {
	res := &StoredTicketResponse{
		Address:   *v.Address,
		PastelID:  *v.PastelID,
		Signature: *v.Signature,
	}

	return res
}
