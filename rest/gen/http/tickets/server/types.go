// Code generated by goa v3.3.1, DO NOT EDIT.
//
// tickets HTTP server types
//
// Command:
// $ goa gen github.com/pastelnetwork/walletnode/rest/design

package server

import (
	"unicode/utf8"

	tickets "github.com/pastelnetwork/walletnode/rest/gen/tickets"
	ticketsviews "github.com/pastelnetwork/walletnode/rest/gen/tickets/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "tickets" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// PastelID
	PastelID *string `form:"pastel_id,omitempty" json:"pastel_id,omitempty" xml:"pastel_id,omitempty"`
	// Signature
	Signature *string `form:"signature,omitempty" json:"signature,omitempty" xml:"signature,omitempty"`
}

// StoredTicketResponseCollection is the type of the "tickets" service "list"
// endpoint HTTP response body.
type StoredTicketResponseCollection []*StoredTicketResponse

// StoredTicketResponse is used to define fields on response body types.
type StoredTicketResponse struct {
	// Address
	Address string `form:"address" json:"address" xml:"address"`
	// PastelID
	PastelID string `form:"pastel_id" json:"pastel_id" xml:"pastel_id"`
	// Signature
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// NewStoredTicketResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "tickets" service.
func NewStoredTicketResponseCollection(res ticketsviews.StoredTicketCollectionView) StoredTicketResponseCollection {
	body := make([]*StoredTicketResponse, len(res))
	for i, val := range res {
		body[i] = marshalTicketsviewsStoredTicketViewToStoredTicketResponse(val)
	}
	return body
}

// NewAddPayload builds a tickets service add endpoint payload.
func NewAddPayload(body *AddRequestBody) *tickets.AddPayload {
	v := &tickets.AddPayload{
		Address:   body.Address,
		PastelID:  body.PastelID,
		Signature: body.Signature,
	}

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 32, false))
		}
	}
	if body.PastelID != nil {
		if utf8.RuneCountInString(*body.PastelID) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.pastel_id", *body.PastelID, utf8.RuneCountInString(*body.PastelID), 32, false))
		}
	}
	return
}
